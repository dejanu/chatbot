Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management, more exaclty is a cluster of nodes (a node is a virtual or physical machine, depending on the cluster).
Google originally designed Kubernetes, but the Cloud Native Computing Foundation now maintains the project.
A cluster is a set of node machines for running containerized applications, each node is managed by the control plane and contains the services necessary to run Pods.
Kubernetes runs your workload by placing containers into Pods to run on Nodes.

The components on a node include the kubelet, a container runtime, and the kube-proxy. The kubelet on a node self-registers to the control plane.You need a working container runtime on each Node in your cluster, so that the kubelet can launch Pods and their containers.
Nodes should be provisioned with the public root certificate for the cluster such that they can connect securely to the API server along with valid client credentials.

A pod is a single container or a group of related containers that share storage and networking resources.Pods get assigned to nodes using affinity feture and nodeSelector
A container image is a ready-to-run software package, containing everything needed to run an application: the code and any runtime it requires, application and system libraries, and default values for any essential settings.Containers decouple applications from underlying host infrastructure. This makes deployment easier in different cloud or OS environments.

A Kubernetes object is a record of intent, meaning once you create the object, the Kubernetes system will constantly work to ensure that object exists, e.g deployment, service, config-map, secrets:
- Deployment is an object for managing pods, defines the container spec and has, at least, two parts a Replica-set and Service.
- Service: is defined as the combination of a group of PODS and a policy to access them.
- Config-Map is an object used to separate configuration data from containers, pods consume config-maps.
- Secrets is same as Config-Maps but they're encoded in base64.

Microservices are self-contained and independent services decoupled from each other can communicate between them via Brokers (Kafka, RabbitMQ), remote procedure calls (RPC) or REST APIs.For microservices cross dependencies are implied since no service can perform without getting help from other services.

Kubernetes is well-known for managing stateless services.The deployment object is more suited to work with stateless applications, while a StatefulSet keeps a unique identity for each pod it manages. StatefulSet uses the same identity whenever it needs to reschedule those pods
Storage is a critical part of running stateful containers, and Kubernetes offers powerful storage primitives for managing it (PersistentVolumeClaims, PersistentVolumes, and StorageClasses)
Dynamic volume provisioning, allows storage volumes to be created on-demand using the provisioner specified by the StorageClass (the PVC must request a storage class and the administrator must have created and configured that class for dynamic provisioning to occur)
A PersistentVolume provides storage in a Kubernetes cluster through an API object that captures the details of the actual storage implementation, be that NFS, iSCSI, or a cloud-provider-specific storage system.
To use a PersistentVolume, you must request it through PersistentVolumeClaims(PVC), which is a request for storage used to mount a PersistentVolume into a Pod.
Although Kubernetes already provides a powerful volume plugin system that makes it easy to consume different types of block and file storage
VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.

Getting external traffic into your cluster can be achieved using the Service Kubernetes object or Ingress (which is  probably the most powerful way to expose your services, but can also be the most complicated).
To expose traffic we need a Ingress Controller like Istio and some Ingress rules.There are many types of Ingress controllers, from the Google Cloud Load Balancer, Nginx, Contour, Istio, and more. 
Istio is a service mesh that provides a set of services that can be used to manage the traffic into the cluster. 
Istio envoy is a proxy, that acts as a LoadBalancer, and is used to route traffic to the services in the cluster.
Istio uses gateway instead of ingress.
Gateway describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections.

Cert-manager (plugin for Ingress controllers) that can automatically provision SSL certificates for your services.
Let's Encrypt issues the Certs (the certificate for the cluster ingress is issued by Let's Encrypt the validity period is only 3 months) using ACME protocol.

Fluentbit is a daemonset (one on each node) that tails container logs and decorates with Kubernetes metadata.These forward to fluentd which will buffer and send to Elasticsearch including some filtering/manipulation.

Tenant represents the ability of having multiple independent parties co-located within the same environment. A tenant is represented by a single kubernetes namespace where all applications for the tenant is to be deployed.
Another purpose of a tenant is to encourage a Gitops (e.g Flux/Argo) deployment model.

Cloud Native technologies:
- Docker (PaaS) products that use OS-level virtualization to deliver software in packages called containers.
- Kubernetes for orchestration and management of containers.
- Istio as a service mesh that provides a set of services that can be used to manage the traffic.
- Kiali management console for Istio service mesh.
- Keycloak for Identity and access management achieving single sign-on across administrator tools like Jaeger, Kiali, and Harbor.
- Harbor registry for Docker images and Helm charts.
- FluxCD (developed by Weaveworks and is now under CNCF) for continuous delivery.
- Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. It has scalability, security (with SSO integration as well), multi-cluster multi-tenancy support and extensibility.
- Jager distributed tracing system, inspired by Google's Dapper paper and OpenZipkin, originally released as open source by Uber Technologies.
- Fluentd as a log collector, processor, and aggregator, handles heavy throughput.
- Fluendbit an open source log collector and processor, designed with performance in mind.
- Prometheus for metric collection as time-series.
- Grafana for visualization.
- Opensearch for distributed analytics search engine and log aggregation.
- Opensearch Dashboard, which is a frontend for querying for application logs. It both supports ad hoc queries as well as dashboards.
- Vault used as an identity-based secret and encryption management system, to manage and protect your secrets in dynamic infrastructure (e.g. database credentials, passwords, API keys).
- Let's Encrypt the objective of Let's Encrypt and the ACME protocol is to make it possible to set up an HTTPS server and have it automatically obtain a browser-trusted certificate, without any human intervention.