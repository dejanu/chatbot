Synergy is a platform as a Service. The Synergy platform provides a Development Environment which allows developers to develop and run applications on a local Synergy instance.
From a historical point of view, Synergy was inspired by FUT Telemedicine project.
Capabilities of Synergy and how they can aid application development by adding:
- Consistency in deployment, use the same deployment mechanism from development to production.
- Service mesh Security, not just an afterthought.
- Monitoring, ensure the application allows monitoring of interactions with other components.
- Metrics, providing custom metrics to aid performance tuning and debugging.

The requirements for the project being onboarded in Synergy are: 
- Projects apps are containerized and run in a Kubernetes cluster and Istio is being used for managing traffic into the cluster

A platform based on Systematic Synergy consists of:
- A deployment server -  from where deployments can be installed and which may host a private registry for serving the docker images that are needed to establish the in-cluster docker registry.
- A Kubernetes cluster - with a control plane and a set of worker nodes (Support for a multicluster setup with a single admin cluster and multiple worker clusters).
- One or more PostgreSQL database clusters(support for in-cluster database using the Synergy Bootstrap PostgreSQL bundle).
- A DNS server that can resolve the host names for the above mentioned services.
- Time between servers in the cluster is synchronized.

The database server is used to create databases for each of the Synergy applications that requires one, but it is also used to automatically provision databases for customer applications if they request it.

How to upgrade? Upgrades should be done incrementally example: 2021.2 to 2021.3 to 2021.4 etc. and upgrades requires everything to be running.

Tooling and technologies used in Synergy:
- Docker
- Kubernetes for orchstration and management of containers
- Istio as a service mesh
- Kiali management console for Istio service mesh
- Keycloak for Identity and access management achieving single sign-on across administrator tools like Jaeger, Kiali, and Harbor
- Harbor registry for Docker images and Helm charts
- FluxCD for continuous delivery
- Jager distributed tracing system
- Fluentd as a log collector, processor, and aggregator, handles heavy throughput 
- Fluendbit an open source log collector and processor, designed with performance in mind
- Prometheus for metric collection as time-series 
- Grafana for visualization
- Opensearch for distributed analytics search engine and log aggregation
- Opensearch Dashboard, which is a frontend for querying for application logs. It both supports ad hoc queries as well as dashboards
- Vault used as anidentity-based secret and encryption management system, to manage and protect your secrets in dynamic infrastructure (e.g. database credentials, passwords, API keys)

Logging tooling and flow used in Synergy, consists of Fluendbit, Fluentd, and Opensearch.
Fluent-bit is a daemonset (one on each node) that tails container logs and decorates with Kubernetes metadata.These forward to Fluentd which will buffer and send to Elasticsearch including some filtering/manipulation afaik
Anyway, yes, killing fluentbit and fluentd will clear their caches which may be holding up the entire log pipeline.

Kubernetes is a cluster of Kubernetes nodes. Each node is a container that runs a Kubernetes pod. A cluster is a set of node machines for running containerized applications. 
A container image is a ready-to-run software package, containing everything needed to run an application: the code and any runtime it requires, application and system libraries, and default values for any essential settings.
A pod is a single container or a group of related containers that share storage and networking resources.

The deployable artifacts are a set of Cloud Native Application Bundles also referred to as just bundles. These contain all the resources and scripts needed to install and configure a part of the Synergy platform. 
Which bundles are installed, depends on the capabilities that a specific cluster should support.
A Synergy release consists of a set of bundles that are installed individually, but in an order that honours the individual dependencies between them.
Available bundles (some are mandatory and some are optional):
The Istio bundle is the first of the mandatory bundles (mandatory). It provides the configuration for properly exposing services in the cluster and the communication and policies for collaborating services.
The Bootstrap bundle (mandatory). It provides Harbor.
The Core bundle (mandatory). It provides Keycloak as Identity Provider, Vault, Kubernetes Dashboard (UI for inspecting the cluster) and Synergy Operator and Synergy console
The GitOps bundle (optional)
The Monitoring bundle (optional). It provides Prometheus (Metrics gathering), Grafana (Metrics Visualization) and Kiali (Mesh visualization)
The Logging bundle (optional). It provides Opensearch (Logs aggregation), Opensearch Dashboard (Logs visualization) and Fluentd (Logs processing)
The Tracing bundle (optional). It provides Jaeger (Distributed tracing)
The ACME bundle (optional).
The Knative bundle (optional).

Synergy Operator used for Resource management and orchestration
Synergy Console UI with links for administrative tools and for inspecting installed bundles
All the Synergy tools are accessible only with a user recognized by the in cluster identity provider (Keycloak), it is recommended to configure external authentication.
The only other alternative is to manage users and roles directly in the Keycloak UI using the local administrator configured during installation. Keycloak can provide an integration with the company authentication provider and controls access to the tools in the Synergy platform.

Istio is a service mesh that provides a set of services that can be used to manage the traffic into the cluster. Istio envoy is a proxy, that acts as a LoadBalancer, and is used to route traffic to the services in the cluster.
Gateway describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections.